
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BenefitScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  type: 'type',
  active: 'active',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeTypeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  active: 'active',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  active: 'active',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  active: 'active',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserBasicInfoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  birthdate: 'birthdate',
  mobileNumber: 'mobileNumber',
  maritalStatus: 'maritalStatus',
  gender: 'gender',
  nationality: 'nationality',
  provinceCode: 'provinceCode',
  cityCode: 'cityCode',
  brangayCode: 'brangayCode',
  zipCode: 'zipCode',
  address: 'address'
};

exports.Prisma.UserEmploymentBackgroundScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  company: 'company',
  position: 'position',
  dateStart: 'dateStart',
  dateEnd: 'dateEnd'
};

exports.Prisma.UserEducationalBackgroundScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  school: 'school',
  level: 'level',
  dateStart: 'dateStart',
  dateEnd: 'dateEnd'
};

exports.Prisma.UserEmployementInfoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeId: 'employeeId',
  salary: 'salary',
  dateRegularization: 'dateRegularization',
  dateStart: 'dateStart',
  dateEnd: 'dateEnd'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  keycloakId: 'keycloakId',
  email: 'email',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserBenefitScalarFieldEnum = {
  userId: 'userId',
  benefitId: 'benefitId',
  amount: 'amount'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.BenefitType = exports.$Enums.BenefitType = {
  DEBIT: 'DEBIT',
  CREDIT: 'CREDIT'
};

exports.MaritalStatus = exports.$Enums.MaritalStatus = {
  SINGLE: 'SINGLE',
  MARRIED: 'MARRIED',
  WIDOWED: 'WIDOWED',
  DIVORCED: 'DIVORCED'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.Nationality = exports.$Enums.Nationality = {
  AFGHAN: 'AFGHAN',
  ALBANIAN: 'ALBANIAN',
  ALGERIAN: 'ALGERIAN',
  AMERICAN: 'AMERICAN',
  ANDORRAN: 'ANDORRAN',
  ANGOLAN: 'ANGOLAN',
  ANTIGUAN: 'ANTIGUAN',
  ARGENTINE: 'ARGENTINE',
  ARMENIAN: 'ARMENIAN',
  AUSTRALIAN: 'AUSTRALIAN',
  AUSTRIAN: 'AUSTRIAN',
  AZERBAIJANI: 'AZERBAIJANI',
  BAHAMIAN: 'BAHAMIAN',
  BAHRAINI: 'BAHRAINI',
  BANGLADESHI: 'BANGLADESHI',
  BARBADIAN: 'BARBADIAN',
  BELARUSIAN: 'BELARUSIAN',
  BELGIAN: 'BELGIAN',
  BELIZEAN: 'BELIZEAN',
  BENINESE: 'BENINESE',
  BHUTANESE: 'BHUTANESE',
  BOLIVIAN: 'BOLIVIAN',
  BOSNIAN: 'BOSNIAN',
  BOTSWANAN: 'BOTSWANAN',
  BRAZILIAN: 'BRAZILIAN',
  BRITISH: 'BRITISH',
  BRUNEIAN: 'BRUNEIAN',
  BULGARIAN: 'BULGARIAN',
  BURKINABE: 'BURKINABE',
  BURMESE: 'BURMESE',
  BURUNDIAN: 'BURUNDIAN',
  CAMBODIAN: 'CAMBODIAN',
  CAMEROONIAN: 'CAMEROONIAN',
  CANADIAN: 'CANADIAN',
  CAPE_VERDEAN: 'CAPE_VERDEAN',
  CENTRAL_AFRICAN: 'CENTRAL_AFRICAN',
  CHADIAN: 'CHADIAN',
  CHILEAN: 'CHILEAN',
  CHINESE: 'CHINESE',
  COLOMBIAN: 'COLOMBIAN',
  COMORAN: 'COMORAN',
  CONGOLESE: 'CONGOLESE',
  COSTA_RICAN: 'COSTA_RICAN',
  CROATIAN: 'CROATIAN',
  CUBAN: 'CUBAN',
  CYPRIOT: 'CYPRIOT',
  CZECH: 'CZECH',
  DANISH: 'DANISH',
  DJIBOUTIAN: 'DJIBOUTIAN',
  DOMINICAN: 'DOMINICAN',
  DUTCH: 'DUTCH',
  EAST_TIMORESE: 'EAST_TIMORESE',
  ECUADORIAN: 'ECUADORIAN',
  EGYPTIAN: 'EGYPTIAN',
  EMIRATI: 'EMIRATI',
  ENGLISH: 'ENGLISH',
  EQUATOGUINEAN: 'EQUATOGUINEAN',
  ERITREAN: 'ERITREAN',
  ESTONIAN: 'ESTONIAN',
  ETHIOPIAN: 'ETHIOPIAN',
  FIJIAN: 'FIJIAN',
  FILIPINO: 'FILIPINO',
  FINNISH: 'FINNISH',
  FRENCH: 'FRENCH',
  GABONESE: 'GABONESE',
  GAMBIAN: 'GAMBIAN',
  GEORGIAN: 'GEORGIAN',
  GERMAN: 'GERMAN',
  GHANAIAN: 'GHANAIAN',
  GREEK: 'GREEK',
  GRENADIAN: 'GRENADIAN',
  GUATEMALAN: 'GUATEMALAN',
  GUINEAN: 'GUINEAN',
  GUINEA_BISSAUAN: 'GUINEA_BISSAUAN',
  GUYANESE: 'GUYANESE',
  HAITIAN: 'HAITIAN',
  HERZEGOVINIAN: 'HERZEGOVINIAN',
  HONDURAN: 'HONDURAN',
  HUNGARIAN: 'HUNGARIAN',
  ICELANDIC: 'ICELANDIC',
  INDIAN: 'INDIAN',
  INDONESIAN: 'INDONESIAN',
  IRANIAN: 'IRANIAN',
  IRAQI: 'IRAQI',
  IRISH: 'IRISH',
  ISRAELI: 'ISRAELI',
  ITALIAN: 'ITALIAN',
  IVORIAN: 'IVORIAN',
  JAMAICAN: 'JAMAICAN',
  JAPANESE: 'JAPANESE',
  JORDANIAN: 'JORDANIAN',
  KAZAKHSTANI: 'KAZAKHSTANI',
  KENYAN: 'KENYAN',
  KIRIBATI: 'KIRIBATI',
  KOREAN: 'KOREAN',
  KOSOVAR: 'KOSOVAR',
  KUWAITI: 'KUWAITI',
  KYRGYZ: 'KYRGYZ',
  LAOTIAN: 'LAOTIAN',
  LATVIAN: 'LATVIAN',
  LEBANESE: 'LEBANESE',
  LIBERIAN: 'LIBERIAN',
  LIBYAN: 'LIBYAN',
  LIECHTENSTEINER: 'LIECHTENSTEINER',
  LITHUANIAN: 'LITHUANIAN',
  LUXEMBOURGER: 'LUXEMBOURGER',
  MACEDONIAN: 'MACEDONIAN',
  MALAGASY: 'MALAGASY',
  MALAWIAN: 'MALAWIAN',
  MALAYSIAN: 'MALAYSIAN',
  MALDIVIAN: 'MALDIVIAN',
  MALIEN: 'MALIEN',
  MALTESE: 'MALTESE',
  MARSHALLESE: 'MARSHALLESE',
  MAURITANIAN: 'MAURITANIAN',
  MAURITIAN: 'MAURITIAN',
  MEXICAN: 'MEXICAN',
  MICRONESIAN: 'MICRONESIAN',
  MOLDOVAN: 'MOLDOVAN',
  MONACAN: 'MONACAN',
  MONGOLIAN: 'MONGOLIAN',
  MONTENEGRIN: 'MONTENEGRIN',
  MOROCCAN: 'MOROCCAN',
  MOSOTHO: 'MOSOTHO',
  MOZAMBICAN: 'MOZAMBICAN',
  NAMIBIAN: 'NAMIBIAN',
  NAURUAN: 'NAURUAN',
  NEPALESE: 'NEPALESE',
  NEW_ZEALANDER: 'NEW_ZEALANDER',
  NICARAGUAN: 'NICARAGUAN',
  NIGERIEN: 'NIGERIEN',
  NIGERIAN: 'NIGERIAN',
  NORWEGIAN: 'NORWEGIAN',
  OMANI: 'OMANI',
  PAKISTANI: 'PAKISTANI',
  PALAUAN: 'PALAUAN',
  PALESTINIAN: 'PALESTINIAN',
  PANAMANIAN: 'PANAMANIAN',
  PAPUA_NEW_GUINEAN: 'PAPUA_NEW_GUINEAN',
  PARAGUAYAN: 'PARAGUAYAN',
  PERUVIAN: 'PERUVIAN',
  POLISH: 'POLISH',
  PORTUGUESE: 'PORTUGUESE',
  QATARI: 'QATARI',
  ROMANIAN: 'ROMANIAN',
  RUSSIAN: 'RUSSIAN',
  RWANDAN: 'RWANDAN',
  SAINT_LUCIAN: 'SAINT_LUCIAN',
  SALVADORAN: 'SALVADORAN',
  SAMOAN: 'SAMOAN',
  SAN_MARINESE: 'SAN_MARINESE',
  SAO_TOMEAN: 'SAO_TOMEAN',
  SAUDI: 'SAUDI',
  SCOTTISH: 'SCOTTISH',
  SENEGALESE: 'SENEGALESE',
  SERBIAN: 'SERBIAN',
  SEYCHELLOIS: 'SEYCHELLOIS',
  SIERRA_LEONEAN: 'SIERRA_LEONEAN',
  SINGAPOREAN: 'SINGAPOREAN',
  SLOVAK: 'SLOVAK',
  SLOVENIAN: 'SLOVENIAN',
  SOLOMON_ISLANDER: 'SOLOMON_ISLANDER',
  SOMALI: 'SOMALI',
  SOUTH_AFRICAN: 'SOUTH_AFRICAN',
  SPANISH: 'SPANISH',
  SRI_LANKAN: 'SRI_LANKAN',
  SUDANESE: 'SUDANESE',
  SURINAMESE: 'SURINAMESE',
  SWAZI: 'SWAZI',
  SWEDISH: 'SWEDISH',
  SWISS: 'SWISS',
  SYRIAN: 'SYRIAN',
  TAIWANESE: 'TAIWANESE',
  TAJIK: 'TAJIK',
  TANZANIAN: 'TANZANIAN',
  THAI: 'THAI',
  TOGOLESE: 'TOGOLESE',
  TONGAN: 'TONGAN',
  TRINIDADIAN: 'TRINIDADIAN',
  TUNISIAN: 'TUNISIAN',
  TURKISH: 'TURKISH',
  TURKMEN: 'TURKMEN',
  TUVALUAN: 'TUVALUAN',
  UGANDAN: 'UGANDAN',
  UKRAINIAN: 'UKRAINIAN',
  URUGUAYAN: 'URUGUAYAN',
  UZBEK: 'UZBEK',
  VATICAN: 'VATICAN',
  VENEZUELAN: 'VENEZUELAN',
  VIETNAMESE: 'VIETNAMESE',
  WELSH: 'WELSH',
  YEMENI: 'YEMENI',
  ZAMBIAN: 'ZAMBIAN',
  ZIMBABWEAN: 'ZIMBABWEAN'
};

exports.Prisma.ModelName = {
  Benefit: 'Benefit',
  EmployeeType: 'EmployeeType',
  Position: 'Position',
  Task: 'Task',
  UserBasicInfo: 'UserBasicInfo',
  UserEmploymentBackground: 'UserEmploymentBackground',
  UserEducationalBackground: 'UserEducationalBackground',
  UserEmployementInfo: 'UserEmployementInfo',
  User: 'User',
  UserBenefit: 'UserBenefit'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
